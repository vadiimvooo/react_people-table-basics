{"version":3,"sources":["components/Navigation/Navigation.tsx","App.tsx","pages/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage/PeoplePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","index.tsx"],"names":["Navigation","React","memo","className","role","isActive","cn","to","App","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","PeopleTable","people","useParams","map","born","died","mother","motherName","father","fatherName","PeoplePage","useState","setPeople","error","setError","isLoading","setIsLoading","loadPeople","peopleFromServer","preparedPeople","find","dad","mom","useEffect","length","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.8a9bae32.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation: React.FC = React.memo(() => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n});\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navigation } from './components/Navigation';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import React from 'react';\n\nexport const HomePage: React.FC = React.memo(() => (\n  <h1 className=\"title\">Home Page</h1>\n));\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = React.memo(({ person }) => {\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n});\n","import cn from 'classnames';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types/Person';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = React.memo(({ people }) => {\n  const { slug } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning': person.slug === slug,\n            })}\n            key={person.slug}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother\n                ? <PersonLink person={person.mother} />\n                : person.motherName || '-'}\n            </td>\n\n            <td>\n              {person.father\n                ? <PersonLink person={person.father} />\n                : person.fatherName || '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Loader } from '../../components/Loader';\nimport { PeopleTable } from '../../components/PeopleTable/PeopleTable';\nimport { Person } from '../../types/Person';\n\nexport const PeoplePage: React.FC = React.memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const loadPeople = async () => {\n    try {\n      const peopleFromServer = await getPeople();\n\n      const preparedPeople = peopleFromServer.map(person => {\n        const father = peopleFromServer.find(dad => (\n          dad.name === person.fatherName\n        ));\n        const mother = peopleFromServer.find(mom => (\n          mom.name === person.motherName\n        ));\n\n        return {\n          ...person,\n          mother,\n          father,\n        };\n      });\n\n      setPeople(preparedPeople);\n    } catch {\n      setError('Unable to load people');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!people.length && !isLoading && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!isLoading && <PeopleTable people={people} />}\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = React.memo(() => (\n  <h1 className=\"title\">Page not found</h1>\n));\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { PeoplePage } from './pages/PeoplePage/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route\n            path=\"/home\"\n            element={<Navigate to=\"/\" replace />}\n          />\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}